#!/usr/bin/env bash
#
# Copyright (c) 2022 Izuma Networks
# 
# Check connectivity to Izuma Cloud services
# - Via multiple ports (443, 5864)
# - Please note for bootstrap and LwM2M by default 5864 (CoAP)
#   is used, but Client/Edge has config "CUSTOM_PORT" which
#   allows you to use port 443 as well.
# - k8s and gateway service is available only via port 443.
#
DEBUG=0
FAILURES=0
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CRED_DIR="$SCRIPT_DIR/credentials"
temp=$(mktemp -d /tmp/IzumaNetTest-XXXXX)
bootT=$temp/bootstrap.txt
k8T=$temp/k8s.txt
gwT=$temp/gateway.txt
LWT=$temp/test-lwm2m.txt
L3T=$temp/layer3.txt
L4T=$temp/layer4.txt
gwR=$temp/registry.txt

# For faster testing w/o actually building the whole snap
#SNAP="snap-test"

VERBOSE=0
DONTDELETE=0

port=5684
NORM="\u001b[0m"
#BOLD="\u001b[1m"
#REV="\u001b[7m"
#UND="\u001b[4m"
#BLACK="\u001b[30m"
RED="\u001b[31m"
GREEN="\u001b[32m"
YELLOW="\u001b[33m"
#BLUE="\u001b[34m"
#MAGENTA="\u001b[35m"
#MAGENTA1="\u001b[35m"
#MAGENTA2="\u001b[35m"
#MAGENTA3="\u001b[35m"
#CYAN="\u001b[36m"
#WHITE="\u001b[37m"
#ORANGE="$YELLOW"
#ERROR="${REV}Error:${NORM}"

clihelp::success() {
    echo -e "[${GREEN}   OK   ${NORM}]\t$1"
}
clihelp::failure() {
    echo -e "[${RED} FAILED ${NORM}]\t$1"
}
clihelp::warning() {
    echo -e "[${YELLOW}  WARN   ${NORM}]\t$1"
}

verbose() {
    if [[ $VERBOSE -eq 1 ]]; then
        echo "$1"
    fi
}

test_bootstrap() {
    verbose "Test bootstrap server connection (port $port)"
    verbose "--------------------------------------------"
    verbose "Uses openssl to connect to bootstrap server using device credentials."
    verbose "Write openssl output to $bootT."
    if ! echo | openssl s_client -CAfile "$CRED_DIR/bootstrap.pem" \
        -key "$CRED_DIR/device01_key.pem" -cert "$CRED_DIR/device01_cert.pem" \
        -connect tcp-bootstrap.us-east-1.mbedcloud.com:"$port" 2>"$bootT" >"$bootT"
    then
        clihelp::failure "openssl failed with: $(cat "$bootT")"
        FAILURES=$((FAILURES + 1))
        return
    fi
    # get openssl return code
    RESULT=$(grep 'Verify return code' "$bootT")
    if [ -z "$RESULT" ]; then
        clihelp::failure "openssl failed with: $(cat "$bootT")"
        FAILURES=$((FAILURES + 1))
    fi
    # print result
    CODE=$(echo "$RESULT" | awk -F' ' '{print $4}')
    if [ "$CODE" = 0 ]; then
        clihelp::success "TLS to bootstrap server (port $port)"
    else
        clihelp::failure "TLS to bootstrap server (port $port)"
        echo "--------------"
        echo "$RESULT"
        echo "--------------"
        FAILURES=$((FAILURES + 1))
    fi
}

# test_lwm2m - test openssl connect to LwM2M server
#
# Arguments (optional)
# - $1 - URL to connect to, default https://lwm2m.us-east-1.mbedcloud.com
# - $2 - port to connect to, default 5684
test_lwm2m() {
    local URL=$1
    URL=${1:-"lwm2m.us-east-1.mbedcloud.com"}
    local PORT
    PORT=${2:-"5684"}
    verbose "Test LwM2M server connection (port $port) to $1"
    verbose "-----------------------------------------------"
    verbose "Uses openssl to connect to LwM2M server $URL:$port using device credentials."
    verbose "Write openssl output to $LWT."
    if ! echo | openssl s_client -CAfile "$CRED_DIR/lwm2m.pem" \
         -key "$CRED_DIR/device01_key.pem" \
         -cert "$CRED_DIR/device01_cert.pem" \
         -connect "${URL}:$PORT" 2>"$LWT" >"$LWT"
    then
        clihelp::failure "openssl failed with: $(cat "$LWT")"
        FAILURES=$((FAILURES + 1))
        return
    fi
    # get openssl return code
    RESULT=$(grep "Verify return code" "$LWT")

    if [ -z "$RESULT" ]; then
        clihelp::failure "openssl failed with: $(cat "$LWT")"
    fi
    # print result
    CODE=$(echo "$RESULT" | awk -F' ' '{print $4}')

    if [ "$CODE" = 0 ]; then
        clihelp::success "TLS to $URL server (port $PORT)"
    else
        clihelp::failure "TLS to $URL server (port $PORT)"
        echo "--------------"
        echo "$RESULT"
        echo "--------------"
    fi
}

test_k8s() {
    verbose "Test edge-k8s server connection (port $port)"
    verbose "--------------------------------------------"
    verbose "Uses openssl to connect to k8s server."
    verbose "Write openssl output to $k8T."
    if ! echo | openssl s_client -connect edge-k8s.us-east-1.mbedcloud.com:"$port" 2>"$k8T" >"$k8T"
    then
        clihelp::failure "openssl failed with: $(cat "$k8T")"
        FAILURES=$((FAILURES + 1))
        return
    fi

    # get openssl return code
    RESULT=$(grep 'Verify return code' "$bootT")
    if [ -z "$RESULT" ]; then
        clihelp::failure "openssl failed with: $(cat "$k8T")"
    fi
    # print result
    CODE=$(echo "$RESULT" | awk -F' ' '{print $4}')
    if [ "$CODE" = 0 ]; then
        clihelp::success "TLS to edge-k8s server (port $port)"
    else
        clihelp::failure "TLS to edge-k8s server (port $port)"
        echo "--------------"
        echo "$RESULT"
        echo "--------------"
    fi
}

test_gateway() {
    verbose "Test gateway server connection (port $port)"
    verbose "------------------------------------------"
    verbose "Uses openssl to connect to gateway server."
    verbose "Write openssl output to $gwT."
    if ! echo | openssl s_client -connect gateways.us-east-1.mbedcloud.com:"$port" 2>"$gwT" >"$gwT"
    then
        clihelp::failure "openssl failed with: $(cat "$gwT")"
        FAILURES=$((FAILURES + 1))
        return
    fi

    # get openssl return code
    RESULT=$(grep 'Verify return code' "$gwT")
    if [ -z "$RESULT" ]; then
        clihelp::failure "openssl failed with: $(cat "$gwT")"
    fi
    # print result
    CODE=$(echo "$RESULT" | awk -F' ' '{print $4}')
    if [ "$CODE" = 0 ]; then
        clihelp::success "TLS to gateway server (port $port)"
    else
        clihelp::failure "TLS to gateway server (port $port)"
        echo "--------------"
        echo "$RESULT"
        echo "--------------"
        FAILURES=$((FAILURES + 1))
    fi
}

test_registry() {
    verbose "Test container registry server connection (port $port)"
    verbose "------------------------------------------------------"
    verbose "Uses openssl to connect to container registry."
    verbose "Write openssl output to $gwR."
    if ! echo | openssl s_client -connect containers.us-east-1.mbedcloud.com:"$port" 2>"$gwR" >"$gwR"
    then
        clihelp::failure "openssl failed with: $(cat "$gwR")"
        FAILURES=$((FAILURES + 1))
        return
    fi

    # get openssl return code
    RESULT=$(grep 'Verify return code' "$gwR")
    if [ -z "$RESULT" ]; then
        clihelp::failure "openssl failed with: $(cat "$gwR")"
        FAILURES=$((FAILURES + 1))
    fi
    # print result
    CODE=$(echo "$RESULT" | awk -F' ' '{print $4}')
    if [ "$CODE" = 0 ]; then
        clihelp::success "TLS to registry server (port $port)"
    else
        clihelp::failure "TLS to registry server (port $port)"
        echo "--------------"
        echo "$RESULT"
        echo "--------------"
        FAILURES=$((FAILURES + 1))
    fi
}


test_L3() {
    _url() {
        if ping -q -c 1 "$1" >>"$L3T" 2>&1; then
            clihelp::success "ping $1"
        else
            clihelp::failure "ping $1"
            FAILURES=$((FAILURES + 1))
        fi
    }
    verbose "Test Layer 3 (requires icmp ping)"
    verbose "---------------------------------"
    _url bootstrap.us-east-1.mbedcloud.com
    _url lwm2m.us-east-1.mbedcloud.com
    _url tcp-lwm2m.us-east-1.mbedcloud.com
    # Check if we're running as a snap or not and change port accordingly.
    # If env variable SNAP exists, we're running as SNAP.
    if [[ -n "${SNAP}" ]]; then
        verbose "Test Layer 3 for snapcraft.io"
        _url api.snapcraft.io
        _url canonical-lgw01.cdn.snapcraftcontent.com 
        _url canonical-lcy01.cdn.snapcraftcontent.com
        _url canonical-lcy02.cdn.snapcraftcontent.com
        _url canonical-bos01.cdn.snapcraftcontent.com
        _url serial-vault-partners.canonical.com  
    fi
}

test_L4() {
    _nc(){
        if nc -v -w 1 "$1" "$2" >>"$L4T" 2>&1; then
            clihelp::success "netcat $1 $2"
        else
            clihelp::failure "netcat $1 $2"
            FAILURES=$((FAILURES + 1))
        fi
    }
    verbose "Test Layer 4 (requires nc)"
    verbose "--------------------------"
    _nc bootstrap.us-east-1.mbedcloud.com 443
    _nc bootstrap.us-east-1.mbedcloud.com 5684
    _nc lwm2m.us-east-1.mbedcloud.com 443
    _nc lwm2m.us-east-1.mbedcloud.com 5684
    _nc tcp-lwm2m.us-east-1.mbedcloud.com 443
    _nc tcp-lwm2m.us-east-1.mbedcloud.com 5684
    _nc edge-k8s.us-east-1.mbedcloud.com 443
    _nc gateways.us-east-1.mbedcloud.com 443
    _nc containers.us-east-1.mbedcloud.com 443
    if [[ -n "${SNAP}" ]]; then
        # https://snapcraft.io/docs/network-requirements
        _nc api.snapcraft.io 443
        _nc dashboard.snapcraft.io 443
        _nc login.ubuntu.com 443
        _nc storage.snapcraftcontent.com 443
        _nc canonical-lgw01.cdn.snapcraftcontent.com 443
        _nc canonical-lcy01.cdn.snapcraftcontent.com 443
        _nc canonical-lcy02.cdn.snapcraftcontent.com 443
        _nc canonical-bos01.cdn.snapcraftcontent.com 443
        _nc serial-vault-partners.canonical.com 443
    fi
}

main() {
    test_L3
    test_L4
    test_bootstrap
    test_lwm2m "lwm2m.us-east-1.mbedcloud.com"
    test_lwm2m "tcp-lwm2m.us-east-1.mbedcloud.com"
    port=443
    test_bootstrap
    # Port 443 only on tcp-lwm2m URL
    test_lwm2m "lwm2m.us-east-1.mbedcloud.com" 443
    test_lwm2m "tcp-lwm2m.us-east-1.mbedcloud.com" 443
    # K8S and Gateway server only operate on port 443
    test_k8s
    test_gateway
    test_registry
    if [[ "$DONTDELETE" -eq 0 ]]; then
        rm -rf "$temp"
    else
        echo "Your files are preserved at $temp"
    fi
    if [[ "$FAILURES" -eq 0 ]]; then
        echo "All tests passed."
    else
        echo "Some tests failed."
        exit 1
    fi
}

displayHelp() {
    echo "Usage: $0 -options"
    echo "  -d do not delete temporary storage"
    echo "  -v verbose output"
    exit
}

argprocessor() {
    while getopts "hHdev" optsin; do
        case "${optsin}" in
            #
            d) DONTDELETE=1 ;;
            #
            e) DEBUG=1 ;;
            #
            h) displayHelp ;;
            #
            H) displayHelp ;;
            #
            v) VERBOSE=1 ;;
            #
            \?)
                echo -e "Option -$OPTARG not allowed.\n "
                displayHelp
                ;;
                #
        esac
    done
    shift $((OPTIND - 1))
    if [[ $# -ne 0 ]]; then
        displayHelp
    else
        shift
        # set echo on if DEBUG=1
        if [[ "$DEBUG" -eq 1 ]]; then
            set -x
        fi
        main "$@"
    fi
}
argprocessor "$@"
