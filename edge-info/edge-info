#!/bin/bash
# Copyright (c) 2018-2020, Arm Limited and affiliates.
# Copyright (c) 2020-2021, Pelion IoT and affiliates.
# Copyright (c) 2022-2023 Izuma Networks
# 
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#https://github.com/longsleep/build-pine64-image/blob/master/simpleimage/platform-scripts/pine64_health.sh
#---------------Configuration-------------#

# No, you cannot export the colors - printing goes crazy if you do that.
NORM="$(tput sgr0)"
BOLD="$(tput bold)"
REV="$(tput smso)"
UND="$(tput smul)"
#BLACK="$(tput setaf 0)"
#RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
#BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
#WHITE="$(tput setaf 7)"
#ERROR="${REV}Error:${NORM}"
version="2.2.0"
export LogToTerm=1
loglevel=info;

THISMACHINE=$(uname -m)

_debug(){
    if [[ $loglevel = "debug" ]]; then
        echo "debug: $1"
    fi
}

#This bash program is intended to work on multiple build systems.  In yocto/linux micro platform (LMP) we set EDGE_DATA at build time to a user variable (default: /var/rootdirs/userdata) using sed.  For other build systems, follow that technique OR add on to the following function to detect your system and set RFILE and IFILE to your desired locations.
STORAGE=EDGE_DATA
set_storage_locations(){
    if [[ -e "$STORAGE" ]]; then
        RFILE="$STORAGE/info/relaystatics.sh"
        IFILE="$STORAGE/edge_gw_config/identity.json"
    else
        RFILE=/userdata/info/relaystatics.sh
        IFILE=/userdata/edge_gw_config/identity.json
    fi
    if [ -e /edge/mbed/edge-core ]; then
        # edge paths.
        BASE_PATH="/edge"
    else
        # wigwag paths.
        BASE_PATH="/wigwag"
    fi
}
set_storage_locations

#This function sets global variables that the info command expects to be set on a OS basis.  Yocto OS is implemented.  Extend this function to implement other OS's
set_OS_vars(){
    OS=$(uname)
    OSVERSION="unknown"
    # shellcheck disable=SC1091
    source /etc/os-release
    if [[ $LMP_MACHINE != "" ]]; then
        OS="LMP"
    fi
    if [[ $PRETTY_NAME != "" ]]; then
        OSVERSION="$PRETTY_NAME"
    fi
}

#all variables that are hardware dependent
set_machine_vars(){
    # shellcheck disable=SC1091
    source /etc/os-release
    if [[ $LMP_MACHINE != "" ]]; then
        THISMACHINE="$LMP_MACHINE"
    fi
    ALLIPS=""
    declare -Ag TEMPRAY
    # Xilinx UZ-targets have non-standard temperature zones
    if [[ -e "/sys/bus/iio/devices/iio:device0/in_temp0_ps_temp_raw" ]]; then
        TEMPRAY["LPD near the APU"]="$(awk '{ printf "%.1f\n", ((($1 * 509.314)/65536.0)-280.23) }' < /sys/bus/iio/devices/iio:device0/in_temp0_ps_temp_raw) C"
    fi
    if [[ -e "/sys/bus/iio/devices/iio:device0/in_temp1_remote_temp_raw" ]]; then
        TEMPRAY["FPD near the RPU"]="$(awk '{ printf "%.1f\n", ((($1 * 509.314)/65536.0)-280.23) }' < /sys/bus/iio/devices/iio:device0/in_temp1_remote_temp_raw) C"
    fi
    if [[ -e "/sys/bus/iio/devices/iio:device0/in_temp2_pl_temp_raw" ]]; then
        TEMPRAY["PL sensor"]="$(awk '{ printf "%.1f\n", ((($1 * 509.314)/65536.0)-280.23) }' < /sys/bus/iio/devices/iio:device0/in_temp2_pl_temp_raw) C"
    fi

    # Pretty much everything else should have common cpu-temp, 3 zones covers a pretty big setup already
    if [[ -e "/sys/class/thermal/thermal_zone0/temp" ]]; then
        TEMPRAY["thermal zone0"]="$(awk '{ printf "%.1f\n", ((($1 )/1000)) }' < /sys/class/thermal/thermal_zone0/temp) C"
    fi
    if [[ -e "/sys/class/thermal/thermal_zone1/temp" ]]; then
        TEMPRAY["thermal zone1"]="$(awk '{ printf "%.1f\n", ((($1 )/1000)) }' < /sys/class/thermal/thermal_zone1/temp) C"
    fi
    if [[ -e "/sys/class/thermal/thermal_zone2/temp" ]]; then
        TEMPRAY["thermal zone2"]="$(awk '{ printf "%.1f\n", ((($1 )/1000)) }' < /sys/class/thermal/thermal_zone2/temp) C"
    fi
    ALLIPS=$(ifconfig | grep inet | grep -v '127.0.0.1' | grep -v 'inet6' | cut -d: -f2 | awk '{print $2}')
    if grep -q "Bcast" <<<"${ALLIPS}"; then
        ALLIPS=$(ifconfig | grep inet | grep -v '127.0.0.1' | grep -v 'inet6' | cut -d: -f2 | awk '{print $1}')
    fi
}

load_statistics(){
    if [[ -e "$RFILE" ]]; then
        # shellcheck disable=SC1090
        source "$RFILE"
    fi
    # Check if we're running as a snap or not and change port accordingly.
    if [[ -n "${SNAP}" ]]; then
        EDGEPORT=8081
    else
        # Try if we're on LmP.
        EDGEPORT=9101
        EDGECORESTATUS=$(curl -s "localhost:${EDGEPORT}/status")
        if [[ -z $(echo "$EDGECORESTATUS" | jq -r '."endpoint-name"') ]]; then
            # Must be running on edge-core only then.
            EDGEPORT=8080
            EDGECORESTATUS=$(curl -s "localhost:${EDGEPORT}/status")
            if [[ -z $(echo "$EDGECORESTATUS" | jq -r '."endpoint-name"') ]]; then
                echo "ERROR - can't find localhost:<port>/status, is edge-core running?"
            fi
        fi
    fi

    EDGECORESTATUS=$(curl -s localhost:"$EDGEPORT"/status);
    if [[ $EDGECORESTATUS = "" ]]; then
        Status="${MAGENTA}offline${NORM}"
    elif [[ $AccountID = "" ]]; then
        AccountID=$(echo "$EDGECORESTATUS" | jq -r '."account-id"')
        Status=$(echo "$EDGECORESTATUS" | jq -r '."status"')
        DID=$(echo "$EDGECORESTATUS" | jq -r '."endpoint-name"')
        URL_LWM2Mserver=$(echo "$EDGECORESTATUS" | jq -r '."lwm2m-server-uri"'| awk -F "?" '{print $1}')
        if [[ -e "$IFILE" ]]; then
            # shellcheck disable=SC2002
            URL_gatewayServicesAddress=$(cat "$IFILE" | jq -r '."gatewayServicesAddress"')
            # shellcheck disable=SC2002
            URL_edgek8sServicesAddress=$(cat "$IFILE" | jq -r '."edgek8sServicesAddress"')
            # shellcheck disable=SC2002
            URL_containerServicesAddress=$(cat "$IFILE" | jq -r '."containerServicesAddress"')
        fi
    else
        Status=$(echo "$EDGECORESTATUS" | jq -r '."status"')
    fi
    if [[ ! -e "$RFILE" && "$URL_gatewayServicesAddress" != "" ]]; then
        { 
            echo "AccountID=\"$AccountID\""
            echo "DID=\"$DID\""
            echo "URL_LWM2Mserver=\"$URL_LWM2Mserver\""
            echo "URL_gatewayServicesAddress=\"$URL_gatewayServicesAddress\""
            echo "URL_edgek8sServicesAddress=\"$URL_edgek8sServicesAddress\""
            echo "URL_containerServicesAddress=\"$URL_containerServicesAddress\""
        } > $RFILE
    fi
}



_exec(){
    local cmd="$1"
    out=$(eval "$cmd" >> /dev/null 2>&1)
    # shellcheck disable=SC2181
    if [[ $? -eq 0 ]]; then
        echo "$out"
    fi
}

_placeTitle(){
    TITLE="$1"
    echo -e "\n${YELLOW}$TITLE${NORM}"
}

_placeLine(){
    SUBJECT="$1"
    BODY="${2:-n/a}"
    len="${#SUBJECT}"
    #echo "$len"
    echo -en "$SUBJECT"
    if [[ $len -lt 8 ]]; then
        echo -en "\t\t\t\t"
    elif [[ $len -lt 16 ]]; then
        echo -en "\t\t\t"
    elif [[ $len -lt 24 ]]; then
        echo -en "\t\t"
    elif [[ $len -lt 32 ]]; then
        echo -en "\t"
    else
        echo -en "";
    fi
    echo -e "${CYAN}$BODY${NORM}"
}

_placeLine_ifSet(){
    if [[ $2 != "" ]]; then
        _placeLine "$1" "$2"
    fi
}

_placeHeader(){
    echo -e "\n\n${YELLOW}${UND}$1 ${NORM}"
}

_div1000(){
    out=$(bc <<< "scale=1; $1 / 1000")
    if [[ "$out" = *".0" ]]; then
        out=$(bc <<< "scale=0; $1 / 1000")
    fi
    echo "$out"
}
_div1000b(){
    out=$(bc <<< "scale=0; $1 / 1000")
    if [[ "$out" = *".0" ]]; then
        out=$(bc <<< "scale=0; $1 / 1000")
    fi
    echo "$out"
}
_div1024(){
    out=$(bc <<< "scale=1; $1 / 1024")
    echo "$out"
}

_percentage(){
    if [[ $1 = 0 || $1 = "" || $2 = 0 || $2 = "" ]]; then
        echo "0"
    else
        bc <<< "scale=2; ""$1""*100/""$2"
    fi
}

_cat_if_exists(){
    if [[ -e "$1" ]]; then
        cat "$1"
    else
        echo ""
    fi
}

PSSTOT=0;
MEM=$(grep MemTotal /proc/meminfo | awk '{print $2}')
MEM=$(_div1000b "$MEM")
AVAILABLE=$(free -m | awk 'NR==2{printf $7}')
#USED=$(free -m | awk 'NR==2{printf $3}')
USED=$(bc <<< "scale=1; $MEM - $AVAILABLE");
#remainder=$(bc <<< "scale=1; $volatilePSS + $PSSTOT + $r2")
UMP=$(_percentage "$USED" "$MEM")
#UMP=$(bc <<< "scale=2; $USED*100/$MEM")
volatilePSS=$(df -h | grep volatile | awk '{print $3}');
if [[ "$volatilePSS" != "" ]]; then
    if [[ "$volatilePSS" = *"K" ]]; then
        volatilePSS=1
    else
        volatilePSS=${volatilePSS::-1}
        if [[ "$volatilePSS" = "" ]]; then
            volatilePSS=0
        fi
    fi
else
    volatilePSS=0
fi

system() {    
    upSeconds=$(cut -d ' ' -f1 "/proc/uptime"  | cut -d '.' -f1);
    secs=$((upSeconds%60))
    mins=$((upSeconds/60%60))
    hours=$((upSeconds/3600%24))
    days=$((upSeconds/86400))
    if [[ "$days" -ne "0" ]]; then
        UPTIME="$days d ";
    fi
    UPTIME="$UPTIME${hours}h ${mins}m ${secs}s"
    USERS="$(who | cut -d ' ' -f1 | sort | uniq | wc -l) users"
    LOAD="$(cat /proc/loadavg)"
    MIN1="$(echo "$LOAD" | awk '{ print $1}')"
    MIN5="$(echo "$LOAD" | awk '{ print $2}')"
    MIN15="$(echo "$LOAD" | awk '{ print $3}')"
    TASKS="$(echo "$LOAD" | awk '{ print $4}')"
    readarray -t IPRAY <<< "$ALLIPS"
    _placeTitle "System Information"
    _placeLine "  - Uptime:" "$UPTIME"
    _placeLine "  - Users:" "$USERS"
    _placeLine "  - Load (1,5,15-min avg):" "$MIN1, $MIN5, $MIN15"
    _placeLine "  - Queued Tasks:" "$TASKS"
    #_placeLine "  - Watchdog:" "$WDOGPID"
    IPRAY_len=${#IPRAY[@]}
    for (( i = 0; i < IPRAY_len; i++ )); do
        theip="${IPRAY[$i]}"
        if [[ "$i" -eq 0 ]]; then
            _placeLine "  - IP Addresses:" "$theip"
        else
            _placeLine "" "$theip"
        fi
    done
    
}

geo(){
    _placeTitle "Geographic Information"
    out=$(curl -m 1 -s ipinfo.io)
    if [[ "$out" != *"timed"* ]]; then
        PUBIP=$(echo "$out" | jq -r ".ip?")
        CITY=$(echo "$out" | jq -r ".city?")
        REGION=$(echo "$out" | jq -r ".region")
        COUNTRY=$(echo "$out" | jq -r ".country?")
        ZIP=$(echo "$out" | jq -r ".postal?")
        LL=$(echo "$out" | jq -r ".loc?")
        ORG=$(echo "$out" | jq -r ".org?")
        _placeLine "  - Public IP:" "$PUBIP"
        _placeLine "  - City:" "$CITY"
        _placeLine "  - Region:" "$REGION"
        _placeLine "  - Country:" "$COUNTRY"
        _placeLine "  - Postal:" "$ZIP"
        _placeLine "  - Lat/Long:" "$LL"
        _placeLine "  - organization:" "$ORG"
    else
        _placeLine "  - timed out reaching ipinfo.io"
    fi
}

firmware(){
    if [[ -e "${BASE_PATH}/etc/versions.json" ]]; then
        currentV=$(grep -ne 'version' ${BASE_PATH}/etc/versions.json 2> /dev/null | xargs | awk -F ' ' '{print $8}')
        currentV=${currentV%%,*}
    else
        currentV="versions.json not available"
    fi
    local bito
    bito=$(getconf LONG_BIT)
    kernelV=$(uname -r)
    echo "${NORM}"
    _placeTitle "Firmware Version Information"
    _placeLine "  - Pelion Edge Version:" "$currentV"
    if [[ -e "${BASE_PATH}/mbed/edge-core" ]]; then
        _placeLine "    - edge-core" "$(${BASE_PATH}/mbed/edge-core -v | awk -F '-' '{print $1}')"
    else
        _placeLine "    - edge-core"
    fi
    _placeLine "  - OS:" "$OS ($bito bit)"
    _placeLine "  - OS Version:" "$OSVERSION"
    _placeLine "  - OS Machine:" "$THISMACHINE"
    _placeLine "  - Kernel Version:" "$kernelV"

}

account(){
    _placeTitle "Account Information"
    _placeLine "  - AccountID:" "$AccountID"
    _placeLine "  - Device ID:" "$DID"
    _placeLine "  - LwM2M Service:" "$URL_LWM2Mserver"
    _placeLine "  - Gateway Service:" "$URL_gatewayServicesAddress"
    _placeLine "  - K8s Service:" "$URL_edgek8sServicesAddress"
    _placeLine "  - Container Service:" "$URL_containerServicesAddress"
    _placeLine "  - Status:" "$Status"
}

hardware(){
    Eth0Mac=$(_cat_if_exists /sys/class/net/eth0s/address)
    local CPUCOUNT
    CPUCOUNT=$(grep -c processor /proc/cpuinfo)
    local HWV
    if [[ -e /proc/device-tree/model ]]; then
        HWV=$(tr -d '\0' </proc/device-tree/model)
    else
        HWV=$(uname -n)
    fi
    _placeTitle "Hardware Information"
    _placeLine_ifSet "  - Hardware name:" "$HWV"
    _placeLine_ifSet "  - eth0 mac:" "$Eth0Mac"
    _placeLine "  - Physical Memory:" "$MEM MB"

    if [[ ${#TEMPRAY[@]} -gt 0 ]]; then
        _placeLine "  - Temperatures:" " "
        for KEY in "${!TEMPRAY[@]}"; do
            VALUE="${TEMPRAY[$KEY]}"
            _placeLine "    - $KEY:" "$VALUE"
        done
    fi
    _placeLine "  - CPU Count:" "$CPUCOUNT"
    header=$(printf "${UND}%14s  %14s  %14s" "Current" "Minimum" "Maximum")
    _placeLine "  - CPU Stats:" "$header"
    for (( i = 0; i < CPUCOUNT; i++ )); do
        # Virtual machines do not always have these.
        if [[ -e  "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_cur_freq" ]]; then
            curspeed=$(cat "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_cur_freq")
            maxspeed=$(cat "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_max_freq")
            minspeed=$(cat "/sys/devices/system/cpu/cpu$i/cpufreq/scaling_min_freq")
            curspeed=$(_div1000 "$curspeed")" Mhz"
            curspeed=$(printf "%14s " "$curspeed")
            maxspeed=$(_div1000 "$maxspeed")" Mhz"
            maxspeed=$(printf "%14s " "$maxspeed")
            minspeed=$(_div1000 "$minspeed")" Mhz"
            minspeed=$(printf "%14s " "$minspeed")
        else
            curspeed=$(printf "%14s " "n/a")
            minspeed=$(printf "%14s " "n/a")
            maxspeed=$(printf "%14s " "n/a")
        fi
        _placeLine "    - CPU$i:" "$curspeed $minspeed $maxspeed"
    done
}

manufacturing(){
    _placeTitle "Factory Manufacturing Information"
    _placeLine "  - Build Date:" "$YEAR-$MONTH-$BATCH"
}

_pad(){
    pad="$1"
    str="$2"
    size=${#str}
    out="";
    if [[ $size -eq 1 ]]; then
        for (( i = 0; i < pad; i++ )); do
            out=" $out"
        done
    elif [[ $size -eq 2 ]]; then
        for (( i = 0; i < $(( pad - 2 )); i++ )); do
            out=" $out"
        done
    fi
    echo "$out$str"
}

_memperf(){
    name="$1"
    pgr="$2"
    pid=$(pgrep -f "$pgr")
    if [[ "$pid" != "" ]]; then
        # This silences shellcheck, but it will not work then...
        # Share="$(_div1024 "$(echo 0 "$(awk '/Shared/ {print "+", $2}' "/proc/$pid/smaps")" | bc)" )"
        # shellcheck disable=SC2046
        Share=$(_div1024 $(echo 0 $(awk '/Shared/ {print "+", $2}' "/proc/$pid/smaps") | bc) )
        #Priv=$(_div1024 $(echo 0 $(awk '/Private/ {print "+", $2}' "/proc/$pid/smaps") | bc)" )
        #Swap=$(_div1024 $(echo 0 $(awk '/Swap/ {print "+", $2}' "/proc/$pid/smaps") | bc)" )
        # shellcheck disable=SC2046
        Virtual=$(_div1024 $(echo 0 $(awk '/Size/ {print "+", $2}' "/proc/$pid/smaps") | bc) )
        #Ref"=$(_div1024 $(echo 0 $(awk "'/Referenced/ {print "+", $2}' /proc/$pid/smaps") | bc) )
        # shellcheck disable=SC2046
        Pss=$(_div1024 $(echo 0 $(awk '/Pss/ {print "+", $2}' "/proc/$pid/smaps") | bc) )
        # shellcheck disable=SC2046
        Rss=$(_div1024 $(echo 0 $(awk '/Rss/ {print "+", $2}' "/proc/$pid/smaps") | bc) )
        PSSTOT="$(bc <<< "scale=1; $PSSTOT + $Pss")"
        #_placeLine "  - $name ($pid):" "$Pss\t$Rss\t$Share\t$Priv\t$Size\t$Ref"
        _placeLine "  - $name ($pid):" "$Pss\t$Share\t$Rss\t$Virtual"
    fi
}

_pstate(){
    name="$1"
    pgr="$2"
    sysd="$3"
    notes="$4"
    pid=$(pgrep -f "$pgr")
    UPTIME="not running"
    if [[ $pid != "" ]]; then
        upSeconds=$(ps -o etimes= -p "$pid");
        secs=$((upSeconds%60))
        mins=$((upSeconds/60%60))
        hours=$((upSeconds/3600%24))
        days=$((upSeconds/86400))
        UPTIME=""
        if [[ "${days}" -ne "0" ]]; then
            UPTIME="$(_pad 1 $days)d ";
        else
            UPTIME="$(_pad 1 0)d ";
        fi
        UPTIME="$UPTIME$(_pad 1 $hours)h $(_pad 1 $mins)m "    
    fi
    STATE=$(systemctl is-active "$sysd")
    if [[ "$STATE" = "inactive" && "$pid" != "" ]]; then
        STATE=running
    fi
    if [[ "$STATE" = "inactive" ]]; then
        STATED="${MAGENTA}$STATE${CYAN}"
    else
        STATED="${GREEN}$STATE${CYAN}"
    fi
    if [[ "$STATE" = "inactive" ]]; then
        _placeLine "  - $name ($pid):" "$STATED\t$UPTIME\t$notes"
    elif [[ $STATE = "activating" ]]; then
        _placeLine "  - $name:" "$STATED\t$UPTIME\t$notes"
    else
        _placeLine "  - $name ($pid):" "$STATED\t\t$UPTIME\t$notes"
    fi
}

procState(){
    _placeTitle "Systemd Process State Information"
    if [[ $(whoami) != "root" ]]; then
        _placeLine " - Requires sudo or root access" " "
    else    
        _placeLine " " "${UND}Status\t\t   Uptime\t\tNotes"
        _pstate "edge-core" "edge-core" "edge-core"
        _pstate "edge-proxy" "edge-proxy" "edge-proxy"
        _pstate "maestro" "maestro-config.yaml" "maestro"
        _pstate "fluentbit" "td-agent-bit" "td-agent-bit"
        _pstate "devicedb" "devicedb.yaml" "devicedb" "started via maestro"
        if [ -e "/edge/system/bin/edge-terminal" ]; then
            _pstate "edge-terminal" "edge-terminal" "edge-terminal"
        else
            _pstate "relay-term" "relay-term/src" "pelion-relay-term"
        fi
        _pstate "edge-kubelet" "kubelet --" "kubelet"
        _pstate "coredns" "coredns -conf" "coredns" "awaiting pods"
        _pstate "kube-router" "kube-router --" "kube-router"
        _pstate "docker" "dockerd" "docker"
    fi
}

performance(){
    _placeTitle "Key Process Memory Information (MB)"
    if [[ $(whoami) != "root" ]]; then
        _placeLine " - Requires sudo or root access" " "
    else            
        _placeLine "  Stats in megabytes (MB)" "${UND}Pss\tShared\tRss\tVirtual"
        _memperf "edge-core" "edge-core"
        _memperf "edge-proxy" "edge-proxy"
        _memperf "maestro" "maestro-config.yaml"
        _memperf "fluentbit" "td-agent-bit"
        _memperf "devicedb" "devicedb.yaml"
        _memperf "relay-term" "relay-term/src"
        _memperf "edge-kubelet" "kubelet --"
        _memperf "coredns" "coredns -conf"
        _memperf "kube-router" "kube-router --"
        _memperf "docker" "dockerd"
    fi
}

memory(){
    _placeTitle "System Memory"
    if [[ $(whoami) != "root" ]]; then
        _placeLine " - Requires sudo or root access" " "
    else
        _placeLine "  " "${UND}Totals\t\tPercentage"
        _placeLine "  - Used/Total:" "$USED/$MEM MB\t$UMP%"
        UMP=$(_percentage "$PSSTOT" "$MEM")
        _placeLine "  - Key Processes:" "$PSSTOT MB\t$UMP% "
        UMP=$(_percentage "$volatilePSS" "$MEM")
        _placeLine "  - Volatile logging:" "$volatilePSS MB\t\t$UMP%"
        r2=$(bc <<< "scale=1; $MEM - $USED")
        r2=$(bc <<< "scale=1; $AVAILABLE - $r2 ")
        remainder=$(bc <<< "scale=1; $volatilePSS + $PSSTOT + $r2")
        remainder=$(bc <<< "scale=1; $USED - $remainder")
        UMP=$(_percentage "$remainder" "$MEM" )
    #_placeLine "  - Other:" "$remainder MB\t\t$UMP%"
    UMP=$(_percentage "$AVAILABLE" "$MEM")
    _placeLine "  - True Available Mem:" "$AVAILABLE MB\t\t$UMP%"
fi
}



Stats(){
    _placeHeader "Edge Information utility version $version"
}

_placeAbout(){
    echo -e "$1" "${CYAN}$2 ${NORM}"
}

about(){
    _placeHeader "About"
    _placeTitle "System Memory"
    _placeAbout "  Read about memory allocation:" "https://www.linuxatemyram.com/"
    _placeAbout "  - Physical Memory:" "How much installed physical ram the system has"
    _placeAbout "  - Memory Usage:" "MemoryUsed/MemoryAvaiable (as a percentage)"
    _placeAbout "  - True Available Mem:" "How much mem can go to processes (minus cache)"
    _placeTitle "Process Memory"
    _placeAbout "  Read about process memory:" "https://goo.gl/wvUhBi"
    _placeAbout "  - Pss:" " Proportional Set Size, overall memory indicator (Rss adjusted for sharing)"
    _placeAbout "  - Rss:" " resident memory usage, all memory the process uses (includes shared mem)"
    _placeAbout "  - Shared:" " memory that this process shares with other processes"
    _placeAbout "  - Private:" " private memory used by this process, check for mem leaks here"
    _placeAbout "  - Virtual:" "total virtual space for the process"
    _placeAbout "  - Referenced: " " amount of memory current marked as referenced or accessed"
}


main(){
    load_statistics
    set_OS_vars
    set_machine_vars
    if [[ $about -eq 1 ]]; then
        about
    else
        Stats
        system
        geo
        firmware
        hardware
        account
        #manufacturing
        if [[ $memory -eq 1 ]]; then
            procState
            performance
            memory
        fi
    fi
}

#-----------------------------------------------------------------------------------------------------#
#                                            ____ _     ___                                           #
#                                           / ___| |   |_ _|                                          #
#                                          | |   | |    | |                                           #
#                                          | |___| |___ | |                                           #
#                                           \____|_____|___|                                          #
#                                                                                                     #
#                                         argument processor                                          #
#-----------------------------------------------------------------------------------------------------#
declare -A hp=(
    [description]="Displays vital system information statistics and process data"
    [usage]="-options"
    [a]="about"
    [d]="debug"
    [h]="help"
    [m]="memory information added"
    [e1]="\t${BOLD}${UND}displays vital system information and process data${NORM}\n\t\t$0${NORM}\n"
    )



#/    Desc:    Gathers all the keys from the menu system and builds a proper string for getopts    
#/    Out:    echo - switch_conditions
#/    Expl:    switch_conditions=$(COMMON_MENU_SWITCH_GRAB)
COMMON_MENU_SWITCH_GRAB(){
    #shellcheck disable=SC2154
    for KEY in "${!hp[@]}"; do
        :
        VALUE=${hp[$KEY]}
        numcheck="${KEY:1:1}"
        skip=false
        if [[ "$numcheck" =~ ^[0-9]+$ ]]; then
            skip=true
        fi
        double=""
        if [[ ${#KEY} -gt 1 ]]; then
            double=":"
            dKEY="${KEY:0:1}"
        else
            dKEY="$KEY"
        fi
        if [[ "$KEY" != "description" && "$KEY" != "usage" && $skip != true ]]; then
            myline="$myline$dKEY$double"
        fi
    done
    echo "$myline"
} #end_COMMON_MENU_SWITCH_GRAB

#/    Desc:    Generates a menu based on a named template system
#/  Global: declare -A hp=() associative array of switches
#/            expects an associative array named hp.
#/            hp nomenclature hp[x] where x represents a switch
#/            and where hp[xx] represents a switch and variable
#/    $1:        [error text]  OPTIONAL
#/    $2:        name1
#/    $3:        name1
#/    Out:    a help text for the cli
#/    Expl:    COMMON_MENU_HELP
COMMON_MENU_HELP(){
    if [[ $1 != "" ]]; then
        echo -e "\nERROR: ${REV}${BOLD}$1${NORM}"
    fi
    echo -e \\n"Help documentation for ${BOLD}$0${NORM}"
    echo -e "${hp[description]}"
    echo -e "----------------------------------------------------------------------------------------"
    echo -e "${BOLD}Basic usage:${NORM}${BOLD} $0 ${NORM} ${hp[usage]}"
    etext=""
    for KEY in "${!hp[@]}"; do
        :
        VALUE=${hp[$KEY]}
        numcheck="${KEY:1:1}"
        skip=false
        if [[ "$numcheck" =~ ^[0-9]+$ ]]; then
            skip=true
            if [[ ${KEY:0:1} = "e" ]]; then
                etext=$etext"${UND}${BOLD} Example:${NORM} $VALUE\n"
            fi
        fi
        if [[ ${#KEY} -gt 1 ]]; then
            dKEY="${KEY:0:1}"
        else
            dKEY="$KEY"
        fi
        if [[ "$KEY" != "description" && "$KEY" != "usage" && $skip != true ]]; then
            switches=$switches"${BOLD}-$dKEY${NORM} $VALUE\n"
        fi
    done  
    echo -e "$switches"  | sort -n -k1
    echo -e "$etext\n"
    exit 1
} #end_COMMON_MENU_HELP


argprocessor(){
    switch_conditions=$(COMMON_MENU_SWITCH_GRAB)
    while getopts "$switch_conditions" flag; do
        case $flag in
            a)  about=1; ;;
            #
            h) COMMON_MENU_HELP "$@"; exit; ;;
            #
            m) memory=1; ;;
            #
            d) set -x; ;;
            #
            \?) echo -e \\n"Option -${BOLD}$OPTARG${NORM} not allowed.";COMMON_MENU_HELP;exit; ;;
            #
        esac
    done
    shift $(( OPTIND - 1 ));
    main "$@"
}

argprocessor "$@"
