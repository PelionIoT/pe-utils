#!/usr/bin/env bash
#
# Copyright (c) 2022-2024 Izuma Networks
# 
# Check connectivity to Izuma Cloud services
# - Via multiple ports (443, 5864)
# - Please note for bootstrap and LwM2M by default 5864 (CoAP)
#   is used, but Client/Edge has config "CUSTOM_PORT" which
#   allows you to use port 443 as well.
# - k8s and gateway service is available only via port 443.
#
DEBUG=0
FAILURES=0
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CRED_DIR="$SCRIPT_DIR/credentials"
temp=$(mktemp -d /tmp/IzumaNetTest-XXXXX)
# shellcheck disable=SC2034
bootstrap_log=$temp/bootstrap.txt
# shellcheck disable=SC2034
edgek8s_log=$temp/k8s.txt
# shellcheck disable=SC2034
gateways_log=$temp/gateway.txt
# shellcheck disable=SC2034
lwm2m_log=$temp/test-lwm2m.txt
# shellcheck disable=SC2034
containers_log=$temp/registry.txt
L3T=$temp/layer3.txt
L4T=$temp/layer4.txt

# For faster testing w/o actually building the whole snap
#SNAP="snap-test"

VERBOSE=0
DONTDELETE=0

NORM="\u001b[0m"
#BOLD="\u001b[1m"
#REV="\u001b[7m"
#UND="\u001b[4m"
#BLACK="\u001b[30m"
RED="\u001b[31m"
GREEN="\u001b[32m"
YELLOW="\u001b[33m"
#BLUE="\u001b[34m"
#MAGENTA="\u001b[35m"
#MAGENTA1="\u001b[35m"
#MAGENTA2="\u001b[35m"
#MAGENTA3="\u001b[35m"
#CYAN="\u001b[36m"
#WHITE="\u001b[37m"
#ORANGE="$YELLOW"
#ERROR="${REV}Error:${NORM}"

clihelp::success() {
    echo -e "[${GREEN}   OK   ${NORM}]\t$1"
}
clihelp::failure() {
    echo -e "[${RED} FAILED ${NORM}]\t$1"
}
clihelp::warning() {
    echo -e "[${YELLOW}  WARN   ${NORM}]\t$1"
}

verbose() {
    if [[ $VERBOSE -eq 1 ]]; then
        echo "$1"
    fi
}

# Extract the server name from the URL - bootstrap/lwm2m/edge-k8s/gateways/containers
# If the URL starts with "edge-k8s", the server name will be from the begining until the second hyphen or the first dot.
# If the URL starts with "tcp-"/"udp-", the server name will come after "tcp-"/"udp-" until the first dot or hyphen
# In other cases the server name will be from the beginning until the first dot or hyphen
#
# Arguments (required)
# - $1 - URL
# - $2 - OUTPUT - the server name extracted from the URL
extract_server_name() {
    local URL="$1"
    local -n OUTPUT="$2"
    local RESULT=""

    if [[ $URL =~ ^(edge-k8s) ]]; then
        # If the URL starts with edge-k8s,
        # Extract the substring from the begining until the second hyphen
        # Or from the beginning until the first dot.
        # In practice it will be "edge-k8s".
        RESULT=$(echo "$URL" | grep -o '^[^-]*-[^-]*' | grep -o '^[^.]*')       
    elif [[ $URL =~ ^(tcp-|udp-) ]]; then
        # If the URL starts with "tcp-" or "udp-",
        # Extract the substring after "tcp-" or "udp-" until the first dot or hyphen.
        RESULT="${URL#"${BASH_REMATCH[0]}"}"
        RESULT="${RESULT%%[.-]*}"
    else
        # In other cases,
        # Extract the substring from the beginning until the first dot or hyphen.        
        RESULT="${URL%%[.-]*}"
    fi    

    verbose "server name is $RESULT"
    # shellcheck disable=SC2034
    OUTPUT="$RESULT"
}

# test_server_with_openssl - test openssl connect with the URL
#
# Arguments (required)
# - $1 - URL to connect to
# - $2 - port to connect to
test_server_with_openssl() {
    local URL=$1
    local PORT=$2

    local SERVER_NAME=""
    
    extract_server_name "$URL" SERVER_NAME
    
    # The log file name must be without hyphen (bash scripts don't support variable names with hyphen)
    # The hypen is removed and "_log" is added.
    # Can happen in case of edge-k8s    
    local LOG_FILE_NAME="${SERVER_NAME//-/}_log"
    LOG_FILE_NAME=${!LOG_FILE_NAME}
    
    local is_bs_or_lwm2m=0
    if [[ "$SERVER_NAME" == "bootstrap" || "$SERVER_NAME" == "lwm2m" ]]; then
        is_bs_or_lwm2m=1
    fi

    verbose "Test $SERVER_NAME server connection (port $PORT)"
    verbose "------------------------------------------------"

    local COMMAND=""
    # If the SKIP_CERT_VALID flag is off and the service is bootstrap or LwM2M
    # Use the keys and the certificate for TLS connection.
    if [[ $SKIP_CERT_VALID -ne 1 && $is_bs_or_lwm2m -eq 1 ]]; then
        verbose "Uses openssl to connect to $SERVER_NAME server using device credentials."
        verbose "Write openssl output to $LOG_FILE_NAME."
        
        COMMAND="openssl s_client -CAfile ${CRED_DIR}/${SERVER_NAME}.pem \
            -key ${CRED_DIR}/device01_key.pem -cert ${CRED_DIR}/device01_cert.pem \
            -connect ${URL}:${PORT} > ${LOG_FILE_NAME} 2>&1"
    else 
        COMMAND="openssl s_client -connect ${URL}:${PORT} > ${LOG_FILE_NAME} 2>&1"
    fi
    
    # If the SKIP_CERT_VALID flag is off or the service is not bootstrap/lwm2m 
    # The command should pass successfully
    # Else, the command is evaluated but its response isn't checked
    if [[ $SKIP_CERT_VALID -ne 1 || $is_bs_or_lwm2m -ne 1 ]]; then
        if ! echo | eval "$COMMAND"
        then
            clihelp::failure "TLS to $URL server (port $PORT)"
            if [[ "$VERBOSE" -eq 1 ]]; then
                cat "$LOG_FILE_NAME"
            fi
            FAILURES=$((FAILURES + 1))
            return
        fi
    else
        eval "$COMMAND"
    fi
    
    # get openssl return code
    RESULT=$(grep 'Verify return code' "$LOG_FILE_NAME")
    if [ -z "$RESULT" ]; then
        clihelp::failure "TLS to $URL server (port $PORT)"
        if [[ "$VERBOSE" -eq 1 ]]; then
            cat "$LOG_FILE_NAME"
        fi
        FAILURES=$((FAILURES + 1))
        return
    fi

    #Check the return code
    local EXP_CODE="0"
    # If the SKIP_CERT_VALID flag is off and the service is bootstrap or LwM2M
    # The return code will be 21
    if [[ $SKIP_CERT_VALID -eq 1 && $is_bs_or_lwm2m -eq 1 ]]; then
        EXP_CODE="21"
    fi
    CODE=$(echo "$RESULT" | awk -F' ' '{print $4}') 
    if [ "$CODE" == "$EXP_CODE" ]; then
        clihelp::success "TLS to $URL server (port $PORT)"
    else
        clihelp::failure "TLS to $URL server (port $PORT)"
        verbose "--------------"
        verbose "$RESULT"
        verbose "--------------"
        FAILURES=$((FAILURES + 1))
    fi
}


test_L3() {
    _url() {
        local URL=$1

        if ping -q -c 1 "$URL" >>"$L3T" 2>&1; then
            clihelp::success "ping $URL"
        else
            clihelp::failure "ping $URL"
            if [[ "$VERBOSE" -eq 1 ]]; then
                cat "$L3T"
            fi
            FAILURES=$((FAILURES + 1))
        fi
    }
    
    _url_test_server_tcp_udp() {
        local SERVER_NAME=$1
        
        _url "$SERVER_NAME""$DOMAIN_NAME"
        _url tcp-"$SERVER_NAME""$DOMAIN_NAME"
        if [[ "$TEST_UDP" -eq 1 ]]; then
            _url udp-"$SERVER_NAME""$DOMAIN_NAME"
        fi
    }

    verbose "Test Layer 3 (requires icmp ping)"
    verbose "---------------------------------"

    _url_test_server_tcp_udp bootstrap
    _url_test_server_tcp_udp lwm2m

    # Check if we're running as a snap or not and change port accordingly.
    # If env variable SNAP exists, we're running as SNAP.
    if [[ -n "${SNAP}" ]]; then
        verbose "Test Layer 3 for snapcraft.io"
        _url api.snapcraft.io
        _url canonical-lgw01.cdn.snapcraftcontent.com 
        _url canonical-lcy01.cdn.snapcraftcontent.com
        _url canonical-lcy02.cdn.snapcraftcontent.com
        _url canonical-bos01.cdn.snapcraftcontent.com
    fi
}

test_L4() {
    _nc(){
        local URL=$1
        local PORT=$2

        if nc -v -w 1 "$URL" "$PORT" >>"$L4T" 2>&1; then
            clihelp::success "netcat $URL $PORT"
        else
            clihelp::failure "netcat $URL $PORT"
            FAILURES=$((FAILURES + 1))
        fi
    }
    
    _nc_test_server_tcp_udp() {
        local SERVER_NAME=$1
        local PORTS=(5684 443)

        for PORT in "${PORTS[@]}"; do
            _nc "$SERVER_NAME""$DOMAIN_NAME" "$PORT"
            _nc tcp-"$SERVER_NAME""$DOMAIN_NAME" "$PORT"
            if [[ "$TEST_UDP" -eq 1 ]]; then
                _nc udp-"$SERVER_NAME""$DOMAIN_NAME" "$PORT"
            fi
        done
            
    }

    verbose "Test Layer 4 (requires nc)"
    verbose "--------------------------"
    
    _nc_test_server_tcp_udp bootstrap
    _nc_test_server_tcp_udp lwm2m

    _nc edge-k8s"$DOMAIN_NAME_EDGE" 443
    _nc gateways"$DOMAIN_NAME_EDGE" 443
    _nc containers"$DOMAIN_NAME_EDGE" 443
    if [[ -n "${SNAP}" ]]; then
        # https://snapcraft.io/docs/network-requirements
        _nc api.snapcraft.io 443
        _nc dashboard.snapcraft.io 443
        _nc login.ubuntu.com 443
        _nc storage.snapcraftcontent.com 443
        _nc canonical-lgw01.cdn.snapcraftcontent.com 443
        _nc canonical-lcy01.cdn.snapcraftcontent.com 443
        _nc canonical-lcy02.cdn.snapcraftcontent.com 443
        _nc canonical-bos01.cdn.snapcraftcontent.com 443
        _nc serial-vault-partners.canonical.com 443
    fi
}

test_TLS() {
    _TLS_test_server_tcp_udp() {
        local SERVER_NAME=$1        
        local PORTS=(5684 443)
        
        for PORT in "${PORTS[@]}"; do
            test_server_with_openssl "$SERVER_NAME""$DOMAIN_NAME" "$PORT"
            test_server_with_openssl tcp-"$SERVER_NAME""$DOMAIN_NAME" "$PORT"
            if [[ "$TEST_UDP" -eq 1 ]]; then
                test_server_with_openssl udp-"$SERVER_NAME""$DOMAIN_NAME" "$PORT"
            fi
        done
    }
    verbose "Test Layer TLS"
    verbose "--------------------------"

    _TLS_test_server_tcp_udp bootstrap
    _TLS_test_server_tcp_udp lwm2m
    
    test_server_with_openssl gateways"$DOMAIN_NAME_EDGE" 443
    test_server_with_openssl edge-k8s"$DOMAIN_NAME_EDGE" 443
    test_server_with_openssl containers"$DOMAIN_NAME_EDGE" 443   
}

main() {
    pinggoogle=$(ping -q -c 1 google.com 2>&1)
    if [[ "$pinggoogle" =~ "100% packet loss" ]]; then
        echo "ICMP traffic blocked, skipping L3 (ping) tests."
    else
        test_L3
    fi

    busyboxnc=$(nc 2>&1)
    if [[ "$busyboxnc" =~ "BusyBox" ]]; then
        echo "BusyBox netcat detected, skipping Layer 4 tests"
    else
        test_L4
    fi

    test_TLS
    
    if [[ "$DONTDELETE" -eq 0 ]]; then
        rm -rf "$temp"
    else
        echo "Your files are preserved at $temp"
    fi
    if [[ "$FAILURES" -eq 0 ]]; then
        echo "All tests passed."
    else
        echo "Some tests failed."
        exit 1
    fi
}

usage() {
    echo "Usage: $0 -options"
    echo "  -d do not delete temporary storage"
    echo "  -v verbose output"
    echo "  -e debug"    
    echo "  -s skip cert validation in TLS tests"
    echo "  -h/-H show this help dialog"
    echo "  --domain  domain name"
    echo "  --env environment. Can be integration/os2/production"
    echo "  if neither --domain or --env aren't supplied, the default is production env."
    echo "  --domain and --env can't be supplied together."
    exit
}

argprocessor() {
    args=$(getopt -o hHdevs --l udp,env:,domain: -- "$@")
    
    if [[ -z "$args" ]]; then
        usage
    fi

    eval set -- "${args}"
    
    while :
    do
        case $1 in
            -d) DONTDELETE=1; shift ;;
            #
            -e) DEBUG=1; shift ;;
            #
            -h) displayHelp; shift ;;
            #
            -H) displayHelp; shift ;;
            #
            -v) VERBOSE=1; shift ;;
            #
            -s) SKIP_CERT_VALID=1; shift;;
            #
            --udp) TEST_UDP=1; shift;;
            #
            --env) ENV="$2"; shift 2 ;;
            #
            --domain) DOMAIN_NAME="$2"; shift 2 ;;
            #
            --) shift; break ;;
            *) >&2 echo Unsupported option: "$1"
              usage ;;
        esac
    done
    
    # set echo on if DEBUG=1
    if [[ "$DEBUG" -eq 1 ]]; then
        set -x
    fi
    
    # Check if either --env or --domain arguments were provided
    if [[ -z "$ENV" && -z "$DOMAIN_NAME" ]]; then
        echo "The env will be set to production."
        ENV="production"
    elif [[ -n "$ENV" && -n "$DOMAIN_NAME" ]]; then
        echo "Both --env or --domain argument were supplied."
        echo "Only one of them must be supplied"
        usage
        exit 1
    fi
    
    # Check if --env is integration/os2/production.
    if [[ -n "$ENV" ]]; then
        if [[ "$ENV" == "integration" ]]; then
            DOMAIN_NAME="-integration-lab.mbedcloudintegration.net"
            DOMAIN_NAME_EDGE=".mbedcloudintegration.net"
        elif [[ "$ENV" == "os2" ]]; then
            DOMAIN_NAME="-os2.mbedcloudstaging.net"
            DOMAIN_NAME_EDGE=".mbedcloudstaging.net"
        elif [[ "$ENV" == "production" ]]; then
            DOMAIN_NAME=".us-east-1.mbedcloud.com"
            DOMAIN_NAME_EDGE="$DOMAIN_NAME"
        else
            echo "--env parameter should be integration/os2/production"
            usage
            exit 1
        fi
    fi
    
    if [[ -n "$DOMAIN_NAME" ]]; then
        DOMAIN_NAME_EDGE="$DOMAIN_NAME"
    fi

    main "$@"    
}
argprocessor "$@"
